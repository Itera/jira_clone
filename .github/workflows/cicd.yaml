name: CI/CD Production

on:
  push:
    branches:
      - master

jobs:
  api-build-and-publish-image:
    name: Build and publish Docker image for API
    runs-on: ubuntu-latest
    env:
      APP_NAME: jira-clone-api
      REGISTRY_NAME: itemadacr.azurecr.io
      NAMESPACE: production-jira-clone
    steps:
      - uses: actions/checkout@master
      # Connect to Azure Container registry (ACR)
      - uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY_NAME }}
          username: ${{ secrets.MAD_DOCKER_PUSH_USERNAME }}
          password: ${{ secrets.MAD_DOCKER_PUSH_PASSWORD }}
      # Container build and push to a Azure Container registry (ACR)
      - run: |
          docker build  ./api/ -t ${{ env.REGISTRY_NAME }}/${{ env.APP_NAME }}:${{ github.sha }} -t ${{ env.REGISTRY_NAME }}/${{ env.APP_NAME }}:latest
          docker push ${{ env.REGISTRY_NAME }}/${{ env.APP_NAME }}
      # Set the target Azure Kubernetes Service (AKS) cluster. 
      - uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.MAD_KUBECONFIG }}
        id: setcontext
      - name: 'Deploy PostgreSQL'
        uses: 'deliverybot/helm@v1'
        with:
          release: 'postgres'
          namespace: '${{ env.NAMESPACE }}'
          chart: 'https://charts.bitnami.com/bitnami/postgresql-10.3.13.tgz'
          version: '11.11.0'
          helm: 'helm3'
          values: |
            persistence:
              storageClass: 'default'
            postgresqlDatabase: ${{ secrets.DB_DATABASE }} 
            postgresqlUsername: ${{ secrets.DB_USERNAME }} 
            postgresqlPassword: ${{ secrets.DB_PASSWORD }}
        env:
          KUBECONFIG_FILE: '${{ secrets.MAD_KUBECONFIG }}'
      # Deploy app to AKS
      - uses: azure/k8s-create-secret@v1
        with:
          namespace: ${{ env.NAMESPACE }}
          secret-type: 'generic'
          arguments: > 
            --from-literal=NODE_ENV=production 
            --from-literal=DB_DATABASE=${{ secrets.DB_DATABASE }} 
            --from-literal=DB_USERNAME=${{ secrets.DB_USERNAME }} 
            --from-literal=DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            --from-literal=DB_HOST=postgres-postgresql.${{ env.NAMESPACE }}.svc.cluster.local
            --from-literal=JWT_SECRET=${{ secrets.JWT_SECRET }}
          secret-name: jira-clone-secret
      - uses: azure/k8s-deploy@v1
        with:
          manifests: |
            api/k8s/deployment.yaml
            api/k8s/service.yaml
            api/k8s/ingress.yaml
          images: ${{ env.REGISTRY_NAME }}/${{ env.APP_NAME }}:${{ github.sha }}
          namespace: ${{ env.NAMESPACE }}

          
  web-build-and-publish-image:
    name: Build and publish Docker image for Web
    runs-on: ubuntu-latest
    env:
      APP_NAME: jira-clone-web
      REGISTRY_NAME: itemadacr.azurecr.io
      NAMESPACE: production-jira-clone
    steps:
      - uses: actions/checkout@master
      # Connect to Azure Container registry (ACR)
      - uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY_NAME }}
          username: ${{ secrets.MAD_DOCKER_PUSH_USERNAME }}
          password: ${{ secrets.MAD_DOCKER_PUSH_PASSWORD }}
      # Container build and push to a Azure Container registry (ACR)
      - run: |
          docker build ./client/ -t ${{ env.REGISTRY_NAME }}/${{ env.APP_NAME }}:${{ github.sha }} -t ${{ env.REGISTRY_NAME }}/${{ env.APP_NAME }}:latest
          docker push ${{ env.REGISTRY_NAME }}/${{ env.APP_NAME }}
      # Set the target Azure Kubernetes Service (AKS) cluster. 
      - uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.MAD_KUBECONFIG }}
        id: setcontext
      # Deploy app to AKS
      - uses: azure/k8s-deploy@v1
        with:
          manifests: |
            client/k8s/deployment.yaml
            client/k8s/service.yaml
            client/k8s/ingress.yaml
          images: ${{ env.REGISTRY_NAME }}/${{ env.APP_NAME }}:${{ github.sha }}
          namespace: ${{ env.NAMESPACE }}